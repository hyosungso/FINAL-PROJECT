<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DB 연결 설정 3단계 -->
	<!-- 1단계 DB연결을 위한 도구 설정 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="MUNGHUB" />
		<property name="password" value="MUNGHUB" />
	</bean>
	
	<!-- 2단계 mybatis에서 제공하는 sql 명령어 실행을 위한 도구 등록 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- configLocation : mybatis config 설정파일 위치 -->
		<!-- ***classpath : classes 폴더 최상단경로 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- mapperLocations : mapper 파일들 위치 (여러개 등록시 *(전체) 와일드 카드 사용)-->
		<property name="mapperLocations" value="classpath:mappers/*-mapper.xml" />
		<!-- DB생성 정보 넣기 (dataSource 위에 만들어놓은거 참조시키기) -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 3단계 sqlSessionFactory로 sql구문 실행시켜줄 템플릿 도구 등록 -->
	<!-- SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory); -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- sqlSessionFactory 넣어주기 -->
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	<!-- 파일 업로드 관련 bean 등록하기 -->
	<!-- MultipartResolver 등록하기 -->	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 업로드되는 파일에 대한 인코딩 처리 -->
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="maxUploadSize" value="10000000"/><!-- 업로드 파일 용량 제한 -->
		<property name="maxInMemorySize" value="10000000"/><!-- 메모리 보관 최대크기(임시보관) -->
	</bean>
	
	<!-- 트랜잭션 사용 설정 
		 @Transactional 어노테이션을 활성화시키는 작업
		 트랜잭션 매니저 도구 등록-->
	<!-- 어떤 데이터베이스의 트랜잭션을 관리할 것인지 설정해야 하기 때문에 root-context에서 작성-->
	<tx:annotation-driven/>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
		<!-- AOP 관련 설정
		@Aspect와 관련된 어노테이션 활성화
	 -->
	<!-- root-context에서 필요한 component들을 활성화시키기 위해서
		 base-package 설정 및 필요한 어노테이션 별도로 등록해주기 (servlet-context)보다 빠른 시점(web.xml 파일 보면 root-context가 먼저 읽힌다)
	 	 root-context와 servlet-context에서 중복으로 등록되는 component들을 중복되지 않도록 지정 처리하기.
	 	 
	 	 @Service,@Repository,@Aspect 세가지 어노테이션은 root-context에서 스캔하겠다.
	 	 use-default-filters : 기본 스캔 설정 (@Component,@Controller,@Service,@Repository 어노테이션들)을 할 지 여부
	 -->	 
	 <context:component-scan base-package="com.kh.pjtMungHub" use-default-filters="false"><!-- servlet-context에서 '필요한 것'만 읽어오기 -->
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	 	<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
	 </context:component-scan>
	 
		<!-- 스케줄러 사용 설정 -->
	 <task:annotation-driven/>
	 <aop:aspectj-autoproxy/>
</beans>
