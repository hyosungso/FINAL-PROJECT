<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shopMapper">

	<resultMap type="Product" id="productResultSet">
		<result column="PRODUCT_NO" property="productNo" />
		<result column="PRODUCT_NAME" property="productName" />
		<result column="STATUS" property="status" />
		<result column="SALES_COUNT" property="salesCount" />
		<result column="PRICE" property="price" />
		<result column="DISCOUNT" property="discount" />
		<result column="CATEGORY_NO" property="categoryNo" />
		<result column="CATEGORY_NAME" property="categoryName" />
		<result column="BRAND_CODE" property="brandCode" />
		<result column="BRAND_NAME" property="brandName" />
		<result column="ATTACHMENT" property="attachment" />
	</resultMap>

	<select id="selectList" resultMap="productResultSet" parameterType="String">
		SELECT PRODUCT_NO,
		PRODUCT_NAME,
		SALES_COUNT,
		PRICE,
		DISCOUNT,
		CATEGORY_NO,
		P.BRAND_CODE,
		FILE_PATH||CHANGE_NAME ATTACHMENT
		FROM PRODUCT P
		INNER JOIN
		PRODUCT_ATTACHMENT PT USING (PRODUCT_NO)
		WHERE P.STATUS = #{status}
		AND
		FILE_LEVEL=0
	</select>

	<select id="selectDetail" parameterType="_int"
		resultMap="productResultSet">
		SELECT PRODUCT_NO,
		PRODUCT_NAME,
		SALES_COUNT,
		PRICE,
		P.STATUS,
		DISCOUNT,
		CATEGORY_NO,
		P.BRAND_CODE
		FROM PRODUCT
		P
		INNER JOIN PRODUCT_ATTACHMENT pt USING (PRODUCT_NO)
		WHERE PRODUCT_NO = #{productNo}
		AND FILE_LEVEL = 0
	</select>
	
	<select id="selectProductInfo"
	parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.ProductDetail">
	SELECT DETAIL_NO detailNo,
	PRODUCT_NO productNo,
	ORIGIN originContry,
	MANUFACTURER manufacturer,
	PHONE phone,
	EXPIRE_DATE expireDate,
	RECOMMENDED_AGE recommendedAge,
	WEIGHT weight,
	INGREDIENT ingredient,
	COMPONENT component
	FROM PRODUCT_DETAIL
	WHERE PRODUCT_NO=#{productNo}
	
	</select>
	
	<insert id="insertDetailInfo"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ProductDetail">
	INSERT INTO PRODUCT_DETAIL(
	DETAIL_NO,
	PRODUCT_NO,
	ORIGIN,
	MANUFACTURER,
	PHONE,
	EXPIRE_DATE,
	RECOMMENDED_AGE,
	WEIGHT,
	INGREDIENT,
	COMPONENT
	)VALUES(
	SEQ_DETAIL.NEXTVAL,
	#{productNo},
	#{originContry},
	#{manufacturer},
	#{phone},
	#{expireDate},
	#{recommendedAge},
	#{weight},
	#{ingredient},
	#{component}
	)
	</insert>
	
	<update id="updateDetailInfo"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ProductDetail">
	UPDATE PRODUCT_DETAIL SET
	ORIGIN=#{originContry},
	MANUFACTURER=#{manufacturer},
	PHONE=#{phone},
	EXPIRE_DATE=#{expireDate},
	RECOMMENDED_AGE=#{recommendedAge},
	WEIGHT=#{weight},
	INGREDIENT=#{ingredient},
	COMPONENT=#{component}
	WHERE DETAIL_NO=#{detailNo}
	
	</update>
	
	<select id="selectReviewCount" parameterType="_int"
	resultType="_int">
	SELECT MAX(ROWNUM)
	FROM PRODUCT_REVIEW
	WHERE PRODUCT_NO=#{productNo}
	
	</select>
	
	<select id="selectReview"
	parameterType="com.kh.pjtMungHub.shop.model.vo.Review"
	resultType="com.kh.pjtMungHub.shop.model.vo.Review">
	SELECT REVIEW_NO reviewNo,
	REVIEW_CONTENT reviewContent,
	CREATE_DATE createDate,
	SCORE score,
	PRODUCT_NO productNo,
	R.USER_NO userNo,
	NAME userName,
	LIKE_COUNT likeCount
	FROM PRODUCT_REVIEW R
	JOIN MEMBER M ON (R.USER_NO = M.USER_NO)
	WHERE PRODUCT_NO=#{productNo}
	AND R.USER_NO=#{userNo}
	</select>
	
	<select id="selectScorePercent" parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.ScorePercent">
	SELECT 
	SCORE score,
	ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) AS percent
	FROM PRODUCT_REVIEW
	WHERE PRODUCT_NO = #{productNo}
	GROUP BY SCORE
	ORDER BY SCORE DESC
	</select>
	
	<select id="selectScoreAvg" parameterType="_int"
	resultType="_double">
	SELECT ROUND(AVG(SCORE),1) AVERAGE
	FROM PRODUCT_REVIEW
	WHERE PRODUCT_NO=#{productNo}
	
	</select>

	<select id="selectFavorite" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo" 
	resultType="com.kh.pjtMungHub.shop.model.vo.Favorite">
		SELECT USER_NO userNo,
		PRODUCT_NO productNo
		FROM FAVORITE
		WHERE PRODUCT_NO=#{productNo}
		AND USER_NO=#{userNo}
		AND DELETE_STATUS=#{justifying}
	</select>
	
	<select id="selectFavoriteList" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo" 
	resultType="com.kh.pjtMungHub.shop.model.vo.Favorite">
		SELECT USER_NO userNo,
		PRODUCT_NO productNo
		FROM FAVORITE
		WHERE USER_NO=#{userNo}
		AND DELETE_STATUS=#{justifying}
	</select>
	
	<insert id="convertFavorite" parameterType="com.kh.pjtMungHub.shop.model.vo.Favorite">
	MERGE INTO FAVORITE
	USING DUAL
	ON (PRODUCT_NO=#{productNo} AND USER_NO=#{userNo})
	WHEN MATCHED THEN
    UPDATE SET 
    DELETE_STATUS='N'
    DELETE
    WHERE DELETE_STATUS='N'
	WHEN NOT MATCHED THEN
     INSERT 
	(PRODUCT_NO,USER_NO)
	VALUES
	(#{productNo},#{userNo})
	</insert>
	
	<insert id="insertReview" parameterType='com.kh.pjtMungHub.shop.model.vo.Review'>
	INSERT INTO PRODUCT_REVIEW(
	REVIEW_NO,
	REVIEW_CONTENT,
	SCORE,
	PRODUCT_NO,
	USER_NO
	)VALUES(
	SEQ_REVIEW.NEXTVAL,
	#{reviewContent},
	#{score},
	#{productNo},
	#{userNo}
	)
	
	</insert>
	
	<update id="updateReview"
	parameterType="com.kh.pjtMungHub.shop.model.vo.Review">
	UPDATE PRODUCT_REVIEW SET
	REVIEW_CONTENT=#{reviewContent},
	SCORE=#{score}
	WHERE USER_NO=#{userNo}
	AND PRODUCT_NO=#{productNo}
	</update>
	
	<select id="selectCategory"
		resultType="com.kh.pjtMungHub.shop.model.vo.Category">
		SELECT CATEGORY_NO categoryNo,
		CATEGORY_NAME categoryName
		FROM PRODUCT_CATEGORY
	</select>
	<select id="selectBrand"
		resultType="com.kh.pjtMungHub.shop.model.vo.Brand"
		parameterType="string">
		SELECT BRAND_CODE brandCode,
		BRAND_NAME brandName,
		BRAND_SALES brandSales,
		BRAND_SALES_COUNT brandSalesCount,
		FILE_PATH||CHANGE_NAME logo
		FROM BRAND
	    LEFT JOIN PRODUCT_ATTACHMENT USING (BRAND_CODE)
		<choose>
		<when test="orderBy=='BRAND_CODE'">ORDER BY BRAND_CODE</when>
		<when test="orderBy=='BRAND_CODEdesc'"> ORDER BY BRAND_CODE DESC</when>
		<when test="orderBy=='BRAND_NAME'"> ORDER BY BRAND_NAME</when>
		<when test="orderBy=='BRAND_NAMEdesc'"> ORDER BY BRAND_NAME DESC</when>
		<when test="orderBy=='BRAND_SALES'"> ORDER BY BRAND_SALES</when>
		<when test="orderBy=='BRAND_SALESdesc'">ORDER BY BRAND_SALES DESC</when>
		<when test="orderBy=='BRAND_SALES_COUNT'">ORDER BY BRAND_SALES_COUNT</when>
		<when test="orderBy=='BRAND_SALES_COUNTdesc'">ORDER BY BRAND_SALES_COUNT DESC</when>
		<otherwise></otherwise>
		</choose>
	</select>
	
	<select id="selectBrandOne" parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.Brand">
		SELECT BRAND_CODE brandCode,
		BRAND_NAME brandName,
		BRAND_SALES brandSales,
		BRAND_SALES_COUNT brandSalesCount,
		FILE_PATH||CHANGE_NAME logo
		FROM BRAND
	    JOIN PRODUCT_ATTACHMENT USING (BRAND_CODE)
	    WHERE BRAND_CODE=#{brandCode}
	</select>
	
	<update id="updateBrandSalesCount"
	parameterType="java.util.ArrayList">
	<foreach collection="list" item="arr"
	open="DECLARE BEGIN" separator=";" close="; END;">
	UPDATE BRAND SET
		BRAND_SALES_COUNT=(
		SELECT NVL(SUM(SALES_COUNT),0)
		FROM PRODUCT
		JOIN BRAND USING(BRAND_CODE)
		WHERE BRAND_CODE=#{arr.brandCode}
		)
		WHERE BRAND_CODE=#{arr.brandCode}
	</foreach>
	</update>
	
	<update id="updateBrandSales"
	parameterType="java.util.ArrayList">
	<foreach collection="list" item="arr"
	open="DECLARE BEGIN" separator=";" close="; END;">
	UPDATE BRAND SET
	BRAND_SALES=(SELECT NVL(SUM(SALES_COUNT*(PRICE-(PRICE/DISCOUNT))),0)
	FROM PRODUCT
	WHERE BRAND_CODE=#{arr.brandCode}
	)
	WHERE BRAND_CODE=#{arr.brandCode}
	</foreach>
	</update>
		
	<update id="updateBrand"
	 parameterType="com.kh.pjtMungHub.shop.model.vo.Brand">
	 UPDATE BRAND SET
	 BRAND_NAME=#{brandName}
	 WHERE BRAND_CODE=#{brandCode}
	 </update>



	<select id="selectReviewList" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultType="com.kh.pjtMungHub.shop.model.vo.Review">
	SELECT * FROM (
	SELECT REVIEW_NO reviewNo,
	REVIEW_CONTENT reviewContent,
	CREATE_DATE createDate,
	SCORE score,
	PRODUCT_NO productNo,
	R.USER_NO userNo,
	NAME userName,
	LIKE_COUNT likeCount
	FROM PRODUCT_REVIEW R
	JOIN MEMBER M ON (R.USER_NO = M.USER_NO)
	WHERE PRODUCT_NO=#{productNo}
	<if test="star!=0">
	AND SCORE=#{star}
	</if>
	<choose>
	<when test="justifying=='latest'">
	ORDER BY CREATE_DATE DESC
	</when>
	<otherwise>
	ORDER BY LIKE_COUNT DESC
	</otherwise>
	</choose>
	)
	<choose>
	<when test="justifying=='best'">
	WHERE ROWNUM BETWEEN 1 AND 4
	</when>
	<otherwise>
	</otherwise>
	</choose>

	</select>
	
	<select id="selectReviewReplyList" 
	resultType="com.kh.pjtMungHub.shop.model.vo.ReviewReply"
	parameterType="_int">
	SELECT REPLY_NO replyNo,
	REPLY_CONTENT replyContent,
	REVIEW_NO reviewNo,
    M.USER_NO userNo,
	NAME userName,
	CREATE_DATE createDate
	FROM PRODUCT_REVIEW_REPLY R
	JOIN MEMBER M ON R.USER_NO= M.USER_NO
	WHERE REVIEW_NO=${reviewNo}
	</select>
	
	<insert id="insertReviewReply"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ReviewReply">
	INSERT INTO PRODUCT_REVIEW_REPLY (
	REPLY_NO,
	REPLY_CONTENT,
	REVIEW_NO,
	USER_NO
	)VALUES(
	SEQ_RRPLY.NEXTVAL,
	#{replyContent},
	#{reviewNo},
	#{userNo}
	)
	</insert>
	
	<delete id="deleteReply" parameterType="_int">
	DELETE FROM PRODUCT_REVIEW_REPLY
     WHERE REPLY_NO = #{replyNo}
	</delete>
	
	<insert id="reviewLike"
	 parameterType="com.kh.pjtMungHub.shop.model.vo.Review">
	 MERGE INTO PRODUCT_REVIEW_LIKE
	USING DUAL
	ON (REVIEW_NO=#{reviewNo} AND USER_NO=#{userNo})
	WHEN MATCHED THEN
    UPDATE SET 
    DELETE_STATUS='N'
	WHEN NOT MATCHED THEN
     INSERT 
	(REVIEW_NO,USER_NO)
	VALUES
	(#{reviewNo},#{userNo})
	 </insert>
	 
	 <delete id="deleteLike">
	 DELETE FROM PRODUCT_REVIEW_LIKE
	 WHERE DELETE_STATUS='N'
	 </delete>
	 
	 <update id="updateLikeCount"
	  parameterType="com.kh.pjtMungHub.shop.model.vo.Review">
	 	UPDATE PRODUCT_REVIEW SET
		LIKE_COUNT = #{likeCount}
		WHERE REVIEW_NO=#{reviewNo}
	 </update>
	 
	 
	 <select id="selectQuestionCategory"
	 resultType="com.kh.pjtMungHub.shop.model.vo.Category">
	 SELECT CATEGORY_NO categoryNo,
	 		CATEGORY_NAME categoryName
	 FROM QUESTION_CATEGORY
	 </select>
	 
	 <select id="selectQuestionList" 
	  resultType="com.kh.pjtMungHub.shop.model.vo.Question"
	 parameterType="_int">
	 SELECT QUESTION_NO questionNo,
		PRODUCT_NO productNo,
		USER_NO userNo,
		NAME userName,
		QUESTION_CONTENT content,
		Q.CATEGORY_NO categoryNo,
		Q.CATEGORY_NAME categoryName,
		OPEN_STATUS openStatus,
		CREATE_DATE createDate
	FROM PRODUCT_QUESTION P
	JOIN QUESTION_CATEGORY Q ON P.CATEGORY_NO=Q.CATEGORY_NO
	JOIN MEMBER USING (USER_NO)
	WHERE PRODUCT_NO=#{productNo}
	ORDER BY CREATE_DATE DESC
	 </select>
	 
	 <select id="selectQuestionDetail"
	 resultType="com.kh.pjtMungHub.shop.model.vo.Question"
	 parameterType="_int">
	  SELECT QUESTION_NO questionNo,
		PRODUCT_NO productNo,
		USER_NO userNo,
		NAME userName,
		QUESTION_CONTENT content,
		Q.CATEGORY_NO categoryNo,
		Q.CATEGORY_NAME categoryName,
		OPEN_STATUS openStatus,
		CREATE_DATE createDate
	FROM PRODUCT_QUESTION P
	JOIN QUESTION_CATEGORY Q ON P.CATEGORY_NO=Q.CATEGORY_NO
	JOIN MEMBER USING (USER_NO)
	WHERE QUESTION_NO=#{questionNo}
	 </select>
	 
	 <insert id="insertQuestion"
	 parameterType="com.kh.pjtMungHub.shop.model.vo.Question">
	 INSERT INTO PRODUCT_QUESTION(
		QUESTION_NO,
		PRODUCT_NO,
		USER_NO,
		QUESTION_CONTENT,
		CATEGORY_NO,
		OPEN_STATUS
		)VALUES(
		SEQ_QUESTION.NEXTVAL,
		#{productNo},
		#{userNo},
		#{content},
		#{categoryNo},
		#{openStatus}
		)
	 </insert>
	 
	 
	 <select id="selectLikeCount" 
 	parameterType="com.kh.pjtMungHub.shop.model.vo.Review"
 	resultType="_int">
 	SELECT MAX(ROWNUM)
	FROM PRODUCT_REVIEW_LIKE
	WHERE REVIEW_NO=#{reviewNo}
 </select>
	 
	<select id="selectQuestionCount" 
	parameterType="_int"
	resultType="_int">
	SELECT MAX(ROWNUM)
	FROM PRODUCT_QUESTION
	WHERE PRODUCT_NO=#{productNo}
	</select>
	
	<select id="selectAnswer" parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.Answer">
	SELECT ANSWER_NO answerNo,
	QUESTION_NO questionNo,
	USER_NO userNo,
	ANSWER_CONTENT content,
	CREATE_DATE createDate
	FROM PRODUCT_ANSWER
	WHERE QUESTION_NO=#{questionNo}
	</select>
	
	<update id="updateQuestionStatus" parameterType="_int">
	UPDATE PRODUCT_QUESTION SET
	ANSWER_STATUS='Y'
	WHERE QUESTION_NO=#{questionNo}
	</update>
	
	<insert id="insertProduct" parameterType="Product">
		INSERT INTO PRODUCT(
		PRODUCT_NO,
		PRODUCT_NAME,
		PRICE,
		DISCOUNT,
		CATEGORY_NO,
		BRAND_CODE)
		VALUES(
		SEQ_PRODUCT.NEXTVAL,
		#{productName},
		#{price},
		#{discount},
		#{categoryNo},
		#{brandCode}
		)
	</insert>
	
	<update id="updateProduct" parameterType="Product">
	 UPDATE PRODUCT SET
		PRODUCT_NAME=#{productName},
		PRICE=#{price},
		DISCOUNT=#{discount},
		CATEGORY_NO=#{categoryNo},
		BRAND_CODE=#{brandCode}
	WHERE PRODUCT_NO=#{productNo}
	</update>

	<insert id="insertAttachment"
		parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
		INSERT ALL 
		<foreach collection="atList" item="arr">
		INTO PRODUCT_ATTACHMENT(
		FILE_LEVEL,
		ORIGIN_NAME,
		CHANGE_NAME,
		FILE_JUSTIFY,
		FILE_PATH,
		TYPE,
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
			<when test="justifying=='pDetail'">
			DETAIL_NO
			</when>
		</choose>
		)VALUES(
			#{arr.fileLev},
			#{arr.originName},
			#{arr.changeName},
			#{arr.fileJustify},
			#{arr.filePath},
			#{arr.type},
			<choose>
				<when test="justifying=='product'">
					SEQ_PRODUCT.CURRVAL
				</when>
				<when test="justifying=='review'">
					SEQ_REVIEW.CURRVAL
				</when>
				<when test="justifying=='brand'">
					SEQ_BRAND.CURRVAL
				</when>
				<when test="justifying=='pDetail'">
					SEQ_DETAIL.CURRVAL
			</when>
			</choose>
			)
		</foreach>
		SELECT * FROM DUAL <!-- 없으면 오류남 -->
	</insert>
	
	<select id="selectAttachment" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultType="com.kh.pjtMungHub.shop.model.vo.Attachment">
		SELECT
		FILE_LEVEL fileLev,
		ORIGIN_NAME originName,
		CHANGE_NAME changeName,
		UPLOAD_DATE uploadDate,
		FILE_JUSTIFY fileJustify,
		FILE_PATH filePath,
		TYPE type,
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO productNo
			</when>
			<when test="justifying=='review'">
				REVIEW_NO reviewNo
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE brandNo
			</when>
			<when test="justifying=='pDetail'">
			DETAIL_NO
			</when>
		</choose>
		FROM PRODUCT_ATTACHMENT
		WHERE 
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
			<when test="justifying=='pDetail'">
			DETAIL_NO
			</when>
		</choose>
		=#{number} <!-- 주요키를 담을 공통적으로 사용할 변수  -->
	AND FILE_LEVEL = #{fileLev}
	</select>
	
	<select id="selectAttachmentList" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultType="com.kh.pjtMungHub.shop.model.vo.Attachment">
	SELECT
		FILE_LEVEL fileLev,
		ORIGIN_NAME originName,
		CHANGE_NAME changeName,
		UPLOAD_DATE uploadDate,
		FILE_JUSTIFY fileJustify,
		FILE_PATH filePath,
		TYPE type
		<choose>
			<when test="justifying=='product'">
				,PRODUCT_NO productNo
			</when>
			<when test="justifying=='review'">
				,REVIEW_NO reviewNo
			</when>
			<when test="justifying=='brand'">
				,BRAND_CODE brandNo
			</when>
			<when test="justifying=='pDetail'">
				,DETAIL_NO detailNo
			</when>
		</choose>
	FROM PRODUCT_ATTACHMENT
	WHERE 
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO=#{number}
			</when>
			<when test="justifying=='review'">
				REVIEW_NO=#{number}
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE=#{number}
			</when>
			<when test="justifying=='pDetail'">
			DETAIL_NO=#{number}
			</when>
			<when test="justifying=='main'">
			FILE_JUSTIFY='main'
			</when>
		</choose>
		
	ORDER BY FILE_LEVEL
	</select>
	
	<update id="updateAttachment" parameterType="java.util.ArrayList">
	<foreach collection="atList" item="arr" index="i"
		open="DECLARE BEGIN" separator=";" close="; END;">
		MERGE INTO PRODUCT_ATTACHMENT
		USING DUAL
		ON(FILE_LEVEL=#{arr.fileLev} AND
		
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO=#{number}
			</when>
			<when test="justifying=='review'">
				REVIEW_NO=#{number}
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE=#{number}
			</when>
			<when test="justifying=='pDetail'">
			 DETAIL_NO=#{number}
			</when>
			<when test="justifying=='main'">
			 FILE_JUSTIFY='main'
			</when>
		</choose>
		
		 )
		WHEN
		MATCHED THEN
		UPDATE SET
		FILE_PATH=#{arr.filePath},
		ORIGIN_NAME=#{arr.originName},
		CHANGE_NAME=#{arr.changeName},
		TYPE=#{arr.type},
		UPLOAD_DATE=SYSDATE
		WHERE 
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO=#{number}
			</when>
			<when test="justifying=='review'">
				REVIEW_NO=#{number}
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE=#{number}
			</when>
			<when test="justifying=='pDetail'">
			DETAIL_NO=#{number}
			</when>
			<when test="justifying=='main'">
			FILE_JUSTIFY='main'
			</when>
		</choose>
		
		WHEN NOT MATCHED
		THEN
		INSERT(
		FILE_LEVEL,
		ORIGIN_NAME,
		CHANGE_NAME,
		FILE_JUSTIFY,
		FILE_PATH,
		TYPE
		<choose>
			<when test="justifying=='product'">
				,PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				,REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				,BRAND_CODE
			</when>
			<when test="justifying=='pDetail'">
				,DETAIL_NO
			</when>
		</choose>
		)VALUES(
			#{arr.fileLev},
			#{arr.originName},
			#{arr.changeName},
			#{arr.fileJustify},
			#{arr.filePath},
			#{arr.type}
			<if test="justifying!='main'">,#{number}</if>
			)
	</foreach>
	</update>
	
	<delete id="deleteAttachment" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	  DELETE FROM PRODUCT_ATTACHMENT
    WHERE FILE_LEVEL =#{fileLev}
    AND 
	<choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
			<when test="justifying=='pDetail'">
			DETAIL_NO
			</when>
		</choose>
		=#{number}
	
	</delete>
	
	<update id="rearrangeAttachment" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	 UPDATE PRODUCT_ATTACHMENT SET
	   FILE_LEVEL= FILE_LEVEL-1
	   WHERE FILE_LEVEL BETWEEN #{fileLev} AND 100
	   AND <choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
			<when test="justifying=='pDetail'">
			DETAIL_NO
			</when>
		</choose>=#{number}
	</update>

	<update id="stopItemPost" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	UPDATE PRODUCT SET 
	STATUS = #{justifying}
	WHERE PRODUCT_NO=#{productNo}
	</update>
	
	<delete id="deleteProductData" parameterType="_int">
	DELETE FROM PRODUCT
	WHERE STATUS='N'
	AND PRODUCT_NO=#{productNo}
	</delete>
	
	
	<select id="selectCartList" resultType="Cart"
		parameterType="_int">
		SELECT
		PRODUCT_NO productNo,
		P_AMOUNT amount,
		PRODUCT_NAME
		productName,
		PRICE price,
		DISCOUNT discount,
		BRAND_NAME brandName,
		CATEGORY_NAME categoryName,
		FILE_PATH || CHANGE_NAME img,
		TYPE imgType
		FROM
		SHOPPING_CART
		LEFT JOIN PRODUCT P
		USING(PRODUCT_NO)
		JOIN BRAND USING
		(BRAND_CODE)
		JOIN PRODUCT_CATEGORY USING (CATEGORY_NO)
		JOIN
		PRODUCT_ATTACHMENT USING (PRODUCT_NO)
		WHERE USER_NO = #{userNo}
		AND FILE_LEVEL= 0
	</select>

	<insert id="addCart" parameterType="Cart">
		MERGE INTO SHOPPING_CART
		USING DUAL
		ON(USER_NO=#{userNo} AND PRODUCT_NO = #{productNo})
		WHEN
		MATCHED THEN
		UPDATE SET P_AMOUNT = P_AMOUNT+#{amount}
		WHEN NOT MATCHED
		THEN
		INSERT (USER_NO,PRODUCT_NO,P_AMOUNT)
		VALUES(#{userNo},#{productNo},#{amount})
	</insert>
	
	<delete id="removeCartItem"
		parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
		DELETE FROM SHOPPING_CART
		WHERE USER_NO = #{userNo}
		AND PRODUCT_NO IN(
		<foreach collection="items" item="arr" separator=",">
		#{arr}
		</foreach>
		)
	</delete>
	<update id="updateCartAmount"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
		UPDATE SHOPPING_CART SET
		P_AMOUNT = P_AMOUNT+#{amount}
		WHERE PRODUCT_NO = #{productNo}
		AND USER_NO = #{userNo}
	</update>
	
	<select id="selectCartCount" resultType="_int" parameterType="_int">
	SELECT MAX(ROWNUM)
	FROM SHOPPING_CART
	WHERE USER_NO=#{userNo}
	</select>
	
	<update id="chooseShipInfo">
		UPDATE SHIP_INFO SET
		CHOOSED = 'N'
		WHERE USER_NO = #{userNo}
	</update>
	<!--insert되기 전에 해당 유저아이디에 저장된 배송정보 체크아웃 풀기  -->
	
	<insert id="insertShipInfo" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.ShipInfo">
	INSERT INTO SHIP_INFO(
	INFO_NO,
	USER_NO,
	ADDRESS,
	ADDRESS_DETAIL,
	RECIPIENT,
	PHONE
	)VALUES(
	SEQ_SHIP_INFO.NEXTVAL,
	#{userNo},
	#{address},
	#{addressDetail},
	#{recipient},
	#{phone}
	)
	</insert>
	
	<update id="updateSalesCount"
	parameterType="Product">
	<foreach collection="list" item="arr" open="DECLARE BEGIN" separator=";" close="; END;">
	UPDATE PRODUCT SET
	SALES_COUNT = SALES_COUNT+#{arr.quantity}
	WHERE PRODUCT_NO = #{arr.productNo}
	</foreach>
	</update>
	
	
	<select id="selectShipInfoList"
	 resultType="com.kh.pjtMungHub.shop.model.vo.ShipInfo" 
	 parameterType="_int">
	SELECT INFO_NO infoNo,
	USER_NO userNo,
	ADDRESS address,
	ADDRESS_DETAIL addressDetail,
	RECIPIENT recipient,
	PHONE phone,
	CHOOSED choosed
	FROM SHIP_INFO
	WHERE USER_NO = #{userNo}
	ORDER BY CHOOSED DESC
	</select>
	
	<update id="changeShipInfo" parameterType="com.kh.pjtMungHub.shop.model.vo.ShipInfo">
	UPDATE SHIP_INFO SET CHOOSED = CASE
	WHEN INFO_NO=#{infoNo} THEN 'Y'
	ELSE 'N'
   	END
    WHERE USER_NO=#{userNo}
	</update>
	
		
	<delete id="removeShipInfo" parameterType="com.kh.pjtMungHub.shop.model.vo.ShipInfo">
		DELETE FROM SHIP_INFO
		WHERE INFO_NO=#{infoNo}
	</delete>
	
	<select id="selectCartItemList" resultType="Cart" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	SELECT
		PRODUCT_NO productNo,
		P_AMOUNT amount,
		PRODUCT_NAME productName,
		PRICE price,
		DISCOUNT discount,
		BRAND_NAME brandName,
		CATEGORY_NAME categoryName,
		FILE_PATH || CHANGE_NAME img
		FROM
		SHOPPING_CART
		LEFT JOIN PRODUCT P
		USING(PRODUCT_NO)
		JOIN BRAND USING
		(BRAND_CODE)
		JOIN PRODUCT_CATEGORY USING (CATEGORY_NO)
		JOIN
		PRODUCT_ATTACHMENT USING (PRODUCT_NO)
		WHERE USER_NO = #{userNo}
		AND FILE_LEVEL= 0
		AND PRODUCT_NO IN(
	<foreach collection="checkedItem" item="arr" separator=",">
	#{arr}
	</foreach>
	)	

	</select>
	
	<select id="selectShipInfo"
	resultType="com.kh.pjtMungHub.shop.model.vo.ShipInfo" 
	 parameterType="_int">
	SELECT
	INFO_NO infoNo,
	USER_NO userNo,
	ADDRESS address,
	ADDRESS_DETAIL addressDetail,
	RECIPIENT recipient,
	PHONE phone,
	CHOOSED choosed
	FROM SHIP_INFO
	WHERE USER_NO = #{userNo}
	AND CHOOSED= 'Y'
	</select>
	
	<select id="selectShipInfo2"
	resultType="com.kh.pjtMungHub.shop.model.vo.ShipInfo" 
	 parameterType="_int">
	 SELECT *
	 FROM(
	SELECT
	INFO_NO infoNo,
	USER_NO userNo,
	ADDRESS address,
	ADDRESS_DETAIL addressDetail,
	RECIPIENT recipient,
	PHONE phone,
	CHOOSED choosed
	FROM SHIP_INFO
	WHERE USER_NO = #{userNo}
	ORDER BY CHOOSED DESC
	)
	WHERE ROWNUM=1
	</select>
	
	<insert id="insertOrderInfo" parameterType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
	INSERT INTO PRODUCT_ORDER(
	MERCHANT_UID,
	SHOPPING_LIST,
	ITMES_QUANTITY,
	TOTAL_PRICE,
	USER_NO,
	MESSAGE,
	ADDRESS,
	RECIPIENT,
	PHONE
	)VALUES(
	#{merchantUid},
	#{items},
	#{itemsQuantity},
	#{totalPrice},
	#{userNo},
	#{message.message},
	#{address},
	#{recipient},
	#{phone}
	)
	</insert>
	
	<select id="selectOrder" parameterType="String" resultType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
	SELECT MERCHANT_UID merchantUid
	,ORDER_PROCESS process
	,SHOPPING_LIST items
	,ITMES_QUANTITY itemsQuantity
	,TOTAL_PRICE totalPrice
	,USER_NO userNo
	,PAY_DATE payDate
	,MESSAGE message
	,ADDRESS address
	,PHONE phone
	,RECIPIENT recipient
	FROM PRODUCT_ORDER
	WHERE MERCHANT_UID=#{merchantUid}
	</select>
	
	<select id="selectOrderList" parameterType="_int" resultType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
		SELECT MERCHANT_UID merchantUid
		,ORDER_PROCESS process
		,SHOPPING_LIST items
		,ITMES_QUANTITY itemsQuantity
		,TOTAL_PRICE totalPrice
		,USER_NO userNo
		,PAY_DATE payDate
		,MESSAGE message
		,ADDRESS address
		,PHONE phone
		,RECIPIENT recipient
		FROM PRODUCT_ORDER
		WHERE USER_NO=#{userNo}
		ORDER BY PAY_DATE DESC
	</select>
	
	<update id="updatePoint" parameterType="com.kh.pjtMungHub.shop.model.vo.Point">
	MERGE INTO SHOP_POINT
		USING DUAL
		ON(USER_NO=#{userNo})
		WHEN
		MATCHED THEN
		UPDATE SET POINT = POINT+#{point}
		WHEN NOT MATCHED
		THEN
		INSERT (USER_NO,POINT)
		VALUES(#{userNo},#{point})
	</update>
	
	<select id="selectPoint" 
	parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.Point">
	SELECT POINT point,
	USER_NO userNo
	FROM SHOP_POINT
	WHERE USER_NO=${userNo}
	</select>

	<select id="selectOrderListControl" parameterType="string"
	resultType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
	SELECT MERCHANT_UID merchantUid,
	ORDER_PROCESS process,
	SHOPPING_LIST items,
	ITMES_QUANTITY itemsQuantity,
	TOTAL_PRICE totalPrice,
	USER_NO userNo,
	PAY_DATE payDate,
	UP_DATE updateDay,
	MESSAGE messageString,
	ADDRESS address,
	RECIPIENT recipient,
	PHONE phone
	FROM PRODUCT_ORDER
	<if test="category!='전체'">
	WHERE ORDER_PROCESS=#{category}
	</if>
	ORDER BY UP_DATE DESC
	</select>
	<select id="selectOrderCount" parameterType="string"
	resultType="_int">
	SELECT MAX(ROWNUM)
FROM PRODUCT_ORDER
<if test="category!='전체'">
WHERE ORDER_PROCESS=#{category}
</if>
	</select>
	
	<update id="convertOrderProcess" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
	UPDATE PRODUCT_ORDER SET
	ORDER_PROCESS=#{process},
	UP_DATE=SYSDATE
	WHERE MERCHANT_UID=#{merchantUid}
	
	</update>
	
	<select id="selectOrderListComplte" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.POrderInfo"
	resultType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
	SELECT 
	SHOPPING_LIST items
	FROM PRODUCT_ORDER
	WHERE USER_NO=#{userNo}
	AND ORDER_PROCESS=#{process}
	</select>
	
	<select id="selectTopSalesProdcut"
	parameterType="string"
	resultMap="productResultSet">
	SELECT *
	FROM
	(SELECT PRODUCT_NO,
	PRODUCT_NAME,
	STATUS,
	SALES_COUNT,
	PRICE,
	DISCOUNT,
	CATEGORY_NO,
	BRAND_CODE,
	BRAND_NAME
	FROM PRODUCT
	JOIN BRAND USING (BRAND_CODE)
	ORDER BY <choose>
	<when test="orderBy=='highest'">SALES_COUNT DESC</when>
	<when test="orderBy=='lowest'">SALES_COUNT </when>
	<when test="orderBy=='highestSal'">SALES_COUNT*(PRICE-(PRICE/DISCOUNT)) DESC</when>
	<when test="orderBy=='lowestSal'">SALES_COUNT*(PRICE-(PRICE/DISCOUNT))</when>
	</choose>
	)
	WHERE ROWNUM BETWEEN 1 AND 5
	</select>
	
	<select id="selectTopSalesBrand"
	parameterType="string"
	resultType="com.kh.pjtMungHub.shop.model.vo.Brand">
	SELECT *
	FROM(
	SELECT BRAND_CODE brandCode,
	BRAND_NAME brandName,
	BRAND_SALES brandSales,
	BRAND_SALES_COUNT brandSalesCount,
    FILE_PATH||CHANGE_NAME logo
	FROM BRAND
    LEFT JOIN PRODUCT_ATTACHMENT USING (BRAND_CODE)
	ORDER BY 
	
	<choose>
	<when test="orderBy=='highest'">BRAND_SALES_COUNT DESC</when>
	<when test="orderBy=='lowest'">BRAND_SALES_COUNT</when>
	<when test="orderBy=='highestSal'">BRAND_SALES DESC</when>
	<when test="orderBy=='lowestSal'">BRAND_SALES</when>
	</choose>
	
	)
	WHERE ROWNUM BETWEEN 1 AND 5
	</select>
	
	<select id="selectProductCount"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultType="_int">
	SELECT MAX(ROWNUM)
	FROM PRODUCT
	WHERE STATUS =#{justifying}
    <if test="categoryNo!=0">
    AND CATEGORY_NO=#{categoryNo}
    </if>
	</select>
	
	<select id="selectProductControll"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultMap="productResultSet">
	SELECT PRODUCT_NO,
        PRODUCT_NAME,
        STATUS,
        SALES_COUNT,
        PRICE,
        DISCOUNT,
        CATEGORY_NO,
        CATEGORY_NAME,
        BRAND_CODE,
        BRAND_NAME
        FROM PRODUCT
        JOIN BRAND USING (BRAND_CODE)
        JOIN PRODUCT_CATEGORY USING(CATEGORY_NO)
        WHERE STATUS =#{justifying}
        <if test="categoryNo!=0">
        AND CATEGORY_NO=#{categoryNo}
        </if>
        ORDER BY <choose>
        <when test="orderBy=='PRODUCT_NO'">PRODUCT_NO</when>
        <when test="orderBy=='PRODUCT_NAME'">PRODUCT_NAME</when>
        <when test="orderBy=='BRAND_NAME'">BRAND_NAME</when>
        <when test="orderBy=='PRICE'">PRICE</when>
        <when test="orderBy=='SALES_COUNT'">SALES_COUNT</when>
        <when test="orderBy=='PRODUCT_NOdesc'">PRODUCT_NO DESC</when>
        <when test="orderBy=='PRODUCT_NAMEdesc'">PRODUCT_NAME DESC</when>
        <when test="orderBy=='BRAND_NAMEdesc'">BRAND_NAME DESC</when>
        <when test="orderBy=='PRICEdesc'">PRICE DESC</when>
        <when test="orderBy=='SALES_COUNTdesc'">SALES_COUNT DESC</when>
        </choose>
	</select>
	<insert id="insertBrand" parameterType="string">
	INSERT INTO BRAND(BRAND_CODE,BRAND_NAME)
	VALUES(SEQ_BRAND.NEXTVAL,#{brandName})
	</insert>

	<insert id="insertCategory"
	parameterType="string">
	INSERT INTO PRODUCT_CATEGORY(
	CATEGORY_NO,CATEGORY_NAME
	)VALUES(
	SEQ_PCATE.NEXTVAL,#{categoryName}
	)
	</insert>
	<update id="updateCategory"
	parameterType="com.kh.pjtMungHub.shop.model.vo.Category">
	UPDATE PRODUCT_CATEGORY SET
	CATEGORY_NAME=#{categoryName}
	WHERE CATEGORY_NO=#{categoryNo}
	</update>
	<delete id="deleteCategory"
	parameterType="_int">
    DELETE FROM PRODUCT_CATEGORY
    WHERE CATEGORY_NO=#{categoryNo}		
	
	</delete>
	
	<select id="selectTopBuyer"
	resultType="com.kh.pjtMungHub.shop.model.vo.Customer">
	SELECT USER_NO userNo,NAME userName,QUANTITY buyerCount
	FROM(
	   SELECT P.USER_NO
	     ,SUM(REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv)) AS QUANTITY
	  FROM  PRODUCT_ORDER P 
	     , (SELECT LEVEL AS lv 
	          FROM dual 
	       CONNECT BY LEVEL <![CDATA[<]]>= 50) b
	 WHERE REGEXP_SUBSTR(P.ITMES_QUANTITY, '[^,]+', 1, b.lv) IS NOT NULL
	GROUP BY USER_NO
	ORDER BY QUANTITY DESC)
	JOIN MEMBER M USING(USER_NO)
	WHERE ROWNUM BETWEEN 1 AND 5
	</select>
	
	<select id="selectTopSpenders"
	resultType="com.kh.pjtMungHub.shop.model.vo.Customer">
	SELECT SUM(TOTAL) spendCount,USER_NO userNo,NAME userName
    FROM (SELECT CASE 
         WHEN TOTAL_PRICE <![CDATA[<]]>30000 THEN TOTAL_PRICE-2500
         WHEN TOTAL_PRICE >30000 THEN TOTAL_PRICE
         END AS TOTAL,
         USER_NO
        FROM PRODUCT_ORDER
        ORDER BY TOTAL DESC
        )
        JOIN MEMBER USING(USER_NO)
        WHERE ROWNUM BETWEEN 1 AND 5
        GROUP BY USER_NO,NAME
        ORDER BY SUM(TOTAL) DESC
	</select>
	
	<select id="selectCustomerList"
	resultType="com.kh.pjtMungHub.shop.model.vo.Customer">
	SELECT A.USER_NO userNo,B.NAME userName,A.QUANTITY buyerCount,B.TOTAL spendCount
	FROM(
	   SELECT P.USER_NO
	     ,SUM(REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv)) AS QUANTITY
	  FROM  PRODUCT_ORDER P 
	     , (SELECT LEVEL AS lv 
	          FROM dual 
	       CONNECT BY LEVEL <![CDATA[<]]>= 50) b
	 WHERE REGEXP_SUBSTR(P.ITMES_QUANTITY, '[^,]+', 1, b.lv) IS NOT NULL
	GROUP BY USER_NO
	ORDER BY QUANTITY DESC) A,(SELECT SUM(TOTAL) TOTAL,USER_NO,NAME
	    FROM (SELECT CASE 
	         WHEN TOTAL_PRICE <![CDATA[<]]>30000 THEN TOTAL_PRICE-2500
	         WHEN TOTAL_PRICE >30000 THEN TOTAL_PRICE
	         END AS TOTAL,
	         USER_NO
	        FROM PRODUCT_ORDER
	        ORDER BY TOTAL DESC
	        )
	        JOIN MEMBER USING(USER_NO)
	        GROUP BY USER_NO,NAME) B
           WHERE A.USER_NO=B.USER_NO
           ORDER BY B.TOTAL DESC
	</select>
	<select id="selectQuestionListControll"
	resultType="com.kh.pjtMungHub.shop.model.vo.Question">
	SELECT QUESTION_NO questionNo,
	PRODUCT_NO productNo,
	USER_NO userNo,
	NAME userName,
	QUESTION_CONTENT content,
	CATEGORY_NO categoryNo,
	OPEN_STATUS openStatus,
	CREATE_DATE createDate,
	ANSWER_STATUS answerStatus
	FROM PRODUCT_QUESTION
	JOIN MEMBER USING (USER_NO)
	</select>
	
	<select id="selectQuestionListUser"
	parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.Question">
	SELECT QUESTION_NO questionNo,
	PRODUCT_NO productNo,
	USER_NO userNo,
	NAME userName,
	QUESTION_CONTENT content,
	CATEGORY_NO categoryNo,
	OPEN_STATUS openStatus,
	CREATE_DATE createDate,
	ANSWER_STATUS answerStatus
	FROM PRODUCT_QUESTION
	JOIN MEMBER USING (USER_NO)
	WHERE USER_NO =#{userNo}
	</select>
	
	<insert id="replyInquiry"
	parameterType="com.kh.pjtMungHub.shop.model.vo.Answer">
	MERGE INTO PRODUCT_ANSWER
    USING DUAL
    ON (QUESTION_NO=#{questionNo})
    WHEN MATCHED THEN
    UPDATE SET 
    ANSWER_CONTENT=#{content}
    WHEN NOT MATCHED THEN
     INSERT 
    (ANSWER_NO,
	QUESTION_NO,
	USER_NO,
	ANSWER_CONTENT)
    VALUES
    (SEQ_ANSWER.NEXTVAL
    ,#{questionNo}
    ,#{userNo}
    ,#{content})
	
	
	</insert>
	
	<update id="updateQustionStatus"
	parameterType="_int">
	UPDATE PRODUCT_QUESTION SET
	ANSWER_STATUS='Y'
	WHERE QUESTION_NO=#{questionNo}
	</update>
	<select id="selectMonthlyTally"
	parameterType="string"
	resultType="com.kh.pjtMungHub.shop.model.vo.MonthlyTally">
	SELECT SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '01', TOTAL_PRICE)) AS "january"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '02', TOTAL_PRICE)) AS "feburary"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '03', TOTAL_PRICE)) AS "march"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '04', TOTAL_PRICE)) AS "april"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '05', TOTAL_PRICE)) AS "may"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '06', TOTAL_PRICE)) AS "june"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '07', TOTAL_PRICE)) AS "july"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '08', TOTAL_PRICE)) AS "august"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '09', TOTAL_PRICE)) AS "september"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '10', TOTAL_PRICE)) AS "october"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '11', TOTAL_PRICE)) AS "november"
     , SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'), '12', TOTAL_PRICE)) AS "december"
  FROM PRODUCT_ORDER
 WHERE PAY_DATE BETWEEN TO_DATE(#{start}, 'YYYY-MM-DD')
                    AND TO_DATE(#{end}, 'YYYY-MM-DD')
	
	
	</select>
	<select id="selectMonthlyTallyCount"
	resultType="com.kh.pjtMungHub.shop.model.vo.MonthlyTally">
	SELECT 
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'01',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "january",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'02',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "feburary",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'03',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "march",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'04',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "april",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'05',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "may",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'06',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "june",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'07',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "july",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'08',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "august",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'09',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "september",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'10',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "october",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'11',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "november",
    SUM(DECODE(TO_CHAR(PAY_DATE, 'MM'),'12',REGEXP_SUBSTR(P.ITMES_QUANTITY,'[^,]+', 1, b.lv))) AS "december"
	  FROM  PRODUCT_ORDER P 
	     , (SELECT LEVEL AS lv 
	          FROM dual 
	       CONNECT BY LEVEL <![CDATA[<]]>= 50) b
	 WHERE REGEXP_SUBSTR(P.ITMES_QUANTITY, '[^,]+', 1, b.lv) IS NOT NULL
        AND PAY_DATE BETWEEN TO_DATE(#{start}, 'YYYY-MM-DD')
                    AND TO_DATE(#{end}, 'YYYY-MM-DD')
	
	</select>
	
	
	<select id="selectMainSlide"
	resultType="com.kh.pjtMungHub.shop.model.vo.Attachment">
	SELECT FILE_LEVEL fileLev,
	ORIGIN_NAME originName,
	CHANGE_NAME changeName,
	UPLOAD_DATE status,
	FILE_JUSTIFY fileJustify,
	FILE_PATH filePath,
	TYPE type
	FROM PRODUCT_ATTACHMENT
	WHERE FILE_JUSTIFY='main'
	</select>
	
	
	
</mapper>